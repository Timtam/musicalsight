{"version":3,"sources":["components/Playback.tsx","utilities.ts","pages/chord/Chord.tsx","pages/chords/Chords.tsx","pages/home/Home.tsx","pages/imprint/Imprint.tsx","pages/note/Note.tsx","pages/notes/Notes.tsx","pages/scale/Scale.tsx","pages/scales/Scales.tsx","components/Navigation.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Playback","props","initialized","piano","Piano","toDestination","a","this","Tone","load","note","length","when","keyDown","time","keyUp","toSeconds","notes","offset","lengths","map","i","arr","undefined","playNote","Note","simplify","Component","mapNoteToName","toLowerCase","isNaN","slice","toUpperCase","mapNoteToLink","mapLinkToNote","link","charAt","match","isNoteLink","test","ChordComponent","params","state","currentNote","Helmet","titleCase","TonalChord","getChord","unescape","chord","name","DropdownButton","title","TonalChordType","names","sort","to","escape","Dropdown","Item","replace","onClick","setState","Card","className","Body","Title","as","Text","TonalNote","Link","initialize","playChord","Chord","withRouter","Chords","ListGroup","ChordType","action","Home","Imprint","NoteComponent","substr","toString","Notes","ScaleComponent","scale","TonalScale","get","reverse","playKey","Table","responsive","striped","bordered","hover","scaleChords","Button","TonalScaleType","renderKey","renderChords","Scale","Scales","ScaleType","Navigation","Container","Navbar","bg","variant","Collapse","Nav","active","exact","path","component","includes","render","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7de8a2b9.chunk.js","sourcesContent":["import Note from \"@tonaljs/note\";\nimport { Piano } from \"@tonejs/piano\";\nimport { Component } from \"react\";\nimport * as Tone from \"tone\";\n\nclass Playback<T1, T2> extends Component<T1, T2> {\n    initialized: boolean;\n    piano: Piano;\n\n    constructor(props: T1) {\n        super(props);\n\n        this.initialized = false;\n        this.piano = new Piano();\n\n        this.piano.toDestination();\n    }\n\n    async initialize() {\n        if (this.initialized) return;\n\n        await Tone.start();\n        await this.piano.load();\n        this.initialized = true;\n    }\n\n    playNote(\n        note: string,\n        length: string | number = \"8n\",\n        when: number = Tone.now()\n    ) {\n        this.piano.keyDown({\n            note: note,\n            time: when,\n        });\n\n        this.piano.keyUp({\n            note: note,\n            time:\n                when +\n                (typeof length === \"number\"\n                    ? length\n                    : Tone.Time(length).toSeconds()),\n        });\n    }\n\n    playChord(notes: string[], offset?: string) {\n        let lengths: number[] = notes.map(\n            (note, i, arr) =>\n                Tone.Time(\"2n\").toSeconds() +\n                (offset === undefined\n                    ? 0\n                    : Tone.Time(offset).toSeconds() * (notes.length - i))\n        );\n\n        let when: number = Tone.now();\n\n        for (let i = 0; i < notes.length; i++) {\n            this.playNote(Note.simplify(notes[i]), lengths[i], when);\n            when += offset === undefined ? 0 : Tone.Time(offset).toSeconds();\n        }\n    }\n}\n\nexport default Playback;\n","export const mapNoteToName = (note: string): string => {\n    note = note.toLowerCase();\n\n    if (!isNaN(+note.slice(-1))) note = note.slice(0, -1);\n\n    if (note.length > 1) {\n        if (note.slice(-1) === \"#\") return note[0].toUpperCase() + \" sharp\";\n        else if (note.slice(-1) === \"b\") return note[0].toUpperCase() + \" flat\";\n    }\n    return note[0].toUpperCase();\n};\n\nexport const mapNoteToLink = (note: string): string => {\n    note = note.toLowerCase();\n\n    if (!isNaN(+note.slice(-1))) note = note.slice(0, -1);\n\n    if (note.length > 1) {\n        if (note.slice(-1) === \"#\") return note[0] + \"-sharp\";\n        else if (note.slice(-1) === \"b\") return note[0] + \"-flat\";\n    }\n    return note[0];\n};\n\nexport const mapLinkToNote = (link: string) => {\n    let note = link.charAt(0).toLowerCase();\n\n    if (link.match(/[a-g]-sharp/i)) note += \"#\";\n    else if (link.match(/[a-g]#-flat/i)) note += \"b\";\n    return note;\n};\n\nexport const isNoteLink = (link: string) => {\n    return /^[a-g](-(sharp|flat))?$/i.test(link);\n};\n","import TonalChord from \"@tonaljs/chord\";\nimport TonalChordType from \"@tonaljs/chord-type\";\nimport TonalNote from \"@tonaljs/note\";\nimport Card from \"react-bootstrap/Card\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\nimport { Helmet } from \"react-helmet\";\nimport { RouteComponentProps, withRouter } from \"react-router\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport { titleCase } from \"title-case\";\nimport Playback from \"../../components/Playback\";\nimport { mapLinkToNote, mapNoteToLink, mapNoteToName } from \"../../utilities\";\n\ntype PathParamsType = {\n    chord: string;\n    note: string;\n};\n\nexport type PropsType = RouteComponentProps<PathParamsType> & {};\n\ntype StateType = {\n    currentNote: string;\n};\n\nclass ChordComponent extends Playback<PropsType, StateType> {\n    constructor(props: PropsType) {\n        super(props);\n\n        let note = \"c\";\n\n        if (this.props.match.params.note !== undefined)\n            note = mapLinkToNote(this.props.match.params.note);\n\n        this.state = {\n            currentNote: note,\n        };\n    }\n\n    render() {\n        return (\n            <>\n                <Helmet>\n                    <title>\n                        {titleCase(\n                            TonalChord.getChord(\n                                unescape(this.props.match.params.chord),\n                                this.state.currentNote\n                            ).name + \" chord\"\n                        )}{\" \"}\n                        - Musical Sight\n                    </title>\n                </Helmet>\n                <h3>\n                    {titleCase(\n                        TonalChord.getChord(\n                            unescape(this.props.match.params.chord)\n                        ).name + \" chord\"\n                    )}\n                </h3>\n                Select the current chord:\n                <DropdownButton\n                    title={\n                        \"Selected chord: \" +\n                        titleCase(\n                            TonalChord.getChord(\n                                unescape(this.props.match.params.chord)\n                            ).name\n                        )\n                    }\n                >\n                    {TonalChordType.names()\n                        .sort()\n                        .map((chord) => (\n                            <LinkContainer\n                                to={\n                                    \"/chords/\" +\n                                    escape(chord) +\n                                    \"/\" +\n                                    mapNoteToLink(this.state.currentNote)\n                                }\n                            >\n                                <Dropdown.Item>\n                                    {titleCase(chord)}\n                                </Dropdown.Item>\n                            </LinkContainer>\n                        ))}\n                </DropdownButton>\n                Select the tonic note for this chord:\n                <DropdownButton\n                    title={\n                        \"Tonic note: \" + mapNoteToName(this.state.currentNote)\n                    }\n                >\n                    {[\n                        \"c\",\n                        \"c#\",\n                        \"d\",\n                        \"d#\",\n                        \"e\",\n                        \"f\",\n                        \"f#\",\n                        \"g\",\n                        \"g#\",\n                        \"a\",\n                        \"a#\",\n                        \"b\",\n                    ].map((note) => (\n                        <LinkContainer\n                            replace\n                            to={\n                                \"/chords/\" +\n                                escape(this.props.match.params.chord) +\n                                \"/\" +\n                                mapNoteToLink(note)\n                            }\n                        >\n                            <Dropdown.Item\n                                onClick={() =>\n                                    this.setState({ currentNote: note })\n                                }\n                            >\n                                {mapNoteToName(note)}\n                            </Dropdown.Item>\n                        </LinkContainer>\n                    ))}\n                </DropdownButton>\n                <Card className=\"text-center\">\n                    <Card.Body>\n                        <Card.Title as=\"h4\">\n                            {titleCase(\n                                TonalChord.getChord(\n                                    unescape(this.props.match.params.chord),\n                                    this.state.currentNote\n                                ).name + \" chord\"\n                            )}\n                        </Card.Title>\n                        <Card.Text>\n                            The following notes are included in this chord:{\" \"}\n                            {TonalChord.getChord(\n                                unescape(this.props.match.params.chord),\n                                this.state.currentNote\n                            ).notes.map((note) => (\n                                <Link\n                                    to={\n                                        \"/notes/\" +\n                                        mapNoteToLink(TonalNote.simplify(note))\n                                    }\n                                >\n                                    {mapNoteToName(TonalNote.simplify(note))}\n                                </Link>\n                            ))}\n                        </Card.Text>\n                        <Card.Link\n                            onClick={async () => {\n                                await this.initialize();\n                                await this.playChord(\n                                    TonalChord.getChord(\n                                        unescape(this.props.match.params.chord),\n                                        this.state.currentNote + \"4\"\n                                    ).notes,\n                                    \"4n\"\n                                );\n                            }}\n                        >\n                            Listen to the slowly arpeggiated chord\n                        </Card.Link>\n                        <Card.Link\n                            onClick={async () => {\n                                await this.initialize();\n                                this.playChord(\n                                    TonalChord.getChord(\n                                        unescape(this.props.match.params.chord),\n                                        this.state.currentNote + \"4\"\n                                    ).notes,\n                                    \"32n\"\n                                );\n                            }}\n                        >\n                            Listen to the quickly arpeggiated chord\n                        </Card.Link>\n                        <Card.Link\n                            onClick={async () => {\n                                await this.initialize();\n                                this.playChord(\n                                    TonalChord.getChord(\n                                        unescape(this.props.match.params.chord),\n                                        this.state.currentNote + \"4\"\n                                    ).notes\n                                );\n                            }}\n                        >\n                            Listen to the full chord\n                        </Card.Link>\n                    </Card.Body>\n                </Card>\n            </>\n        );\n    }\n}\n\nexport const Chord = withRouter(ChordComponent);\n","import ChordType from \"@tonaljs/chord-type\";\nimport React, { Component } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport { Helmet } from \"react-helmet\";\nimport { LinkContainer } from \"react-router-bootstrap\";\n\nclass Chords extends Component {\n    render() {\n        return (\n            <>\n                <Helmet>\n                    <title>Chords - Musical Sight</title>\n                </Helmet>\n\n                <Card className=\"text-center\">\n                    <Card.Body>\n                        <Card.Title as=\"h3\">Chords</Card.Title>\n                        <Card.Text>\n                            You will find the alphabetically sorted list of all\n                            common chords below. Follow the links to find more\n                            information about the chords, including audio\n                            examples.\n                        </Card.Text>\n                    </Card.Body>\n                </Card>\n\n                <h3>Chords List</h3>\n\n                <ListGroup>\n                    {ChordType.names()\n                        .sort()\n                        .map((chord) => (\n                            <LinkContainer to={\"/chords/\" + escape(chord)}>\n                                <ListGroup.Item action>{chord}</ListGroup.Item>\n                            </LinkContainer>\n                        ))}\n                </ListGroup>\n            </>\n        );\n    }\n}\n\nexport default Chords;\n","import React, { Component } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport { Helmet } from \"react-helmet\";\n\nclass Home extends Component {\n    render() {\n        return (\n            <>\n                <Helmet>\n                    <title>Home - Musical Sight</title>\n                </Helmet>\n\n                <Card className=\"text-center\">\n                    <Card.Body>\n                        <Card.Title as=\"h3\">Welcome!</Card.Title>\n                        <Card.Text>\n                            Musical Sight aims to provide useful information\n                            about music theory, notes, scales and alot more.\n                            Most of the stuff shown here is common knowledge to\n                            sighted people who are able to communicate knowledge\n                            via slides, video material and more, while blind\n                            people often have to stick with learning through\n                            their ears only. To help them understand things a\n                            bit better, Musical Sight will try to organize\n                            information in a way that is more useful for blind\n                            people, including note and scale sound previews.\n                            Keep in mind however that this is still a fan\n                            website. Neither do I guarantee the correctness of\n                            all the information that is shown here, nor can I be\n                            made responsible for any potential damage that is\n                            caused to you by using this website.\n                        </Card.Text>\n                    </Card.Body>\n                </Card>\n            </>\n        );\n    }\n}\n\nexport default Home;\n","import React, { Component } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport { Helmet } from \"react-helmet\";\n\nclass Imprint extends Component {\n    render() {\n        return (\n            <>\n                <Helmet>\n                    <title>Imprint - Musical Sight</title>\n                </Helmet>\n\n                <Card className=\"text-center\">\n                    <Card.Body>\n                        <Card.Title>Imprint and related information</Card.Title>\n                        <Card.Text>\n                            Find all the relevant information here!\n                        </Card.Text>\n                    </Card.Body>\n                </Card>\n            </>\n        );\n    }\n}\n\nexport default Imprint;\n","import { Helmet } from \"react-helmet\";\nimport { RouteComponentProps, withRouter } from \"react-router\";\nimport Playback from \"../../components/Playback\";\nimport { mapLinkToNote } from \"../../utilities\";\n\ntype PathParamsType = {\n    note: string;\n};\n\nexport type PropsType = RouteComponentProps<PathParamsType> & {};\n\nclass NoteComponent extends Playback<PropsType, {}> {\n    note: string;\n\n    constructor(props: PropsType) {\n        super(props);\n\n        // parsing the note out of the url parameter\n        this.note = mapLinkToNote(this.props.match.params.note);\n    }\n\n    toString() {\n        return this.note[0].toUpperCase() + this.note.substr(1);\n    }\n\n    render() {\n        return (\n            <>\n                <Helmet>\n                    <title>{this.toString()} - Musical Sight</title>\n                </Helmet>\n\n                <h3>{this.toString()}</h3>\n\n                <button\n                    onClick={async () => {\n                        await this.initialize();\n                        this.playNote(this.note + \"4\");\n                    }}\n                >\n                    Listen now\n                </button>\n            </>\n        );\n    }\n}\n\nexport const Note = withRouter(NoteComponent);\n","import React, { Component } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport { Helmet } from \"react-helmet\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport { mapNoteToLink, mapNoteToName } from \"../../utilities\";\n\nclass Notes extends Component {\n    render() {\n        return (\n            <>\n                <Helmet>\n                    <title>Notes - Musical Sight</title>\n                </Helmet>\n\n                <Card className=\"text-center\">\n                    <Card.Body>\n                        <Card.Title as=\"h3\">Notes</Card.Title>\n                        <Card.Text>\n                            All melodies and chords consist of the same 12 notes\n                            distributed over multiple octaves, starting from\n                            octave 0 up to octave 7. Notes are usually written\n                            with their corresponding octave number appended to\n                            them, the note C in octave 4 being written as C4. C4\n                            is also known as the middle C.\n                        </Card.Text>\n                        <Card.Text>\n                            This page lists all 12 notes in ascending order,\n                            with all the sharp/flat notes being known as the\n                            black keys on a keyboard and every other note being\n                            a white key. The highest note (B) is followed by a C\n                            again, but within the next octave and vice versa.\n                            You can click on any note listed here to open its\n                            corresponding page, where you will find listening\n                            example and more information on the note, its keys\n                            and so on.\n                        </Card.Text>\n                    </Card.Body>\n                </Card>\n\n                <h3>Notes List</h3>\n\n                <ListGroup>\n                    {[\n                        \"c\",\n                        \"c#\",\n                        \"d\",\n                        \"d#\",\n                        \"e\",\n                        \"f\",\n                        \"f#\",\n                        \"g\",\n                        \"g#\",\n                        \"a\",\n                        \"a#\",\n                        \"b\",\n                    ].map((note) => (\n                        <LinkContainer to={\"/notes/\" + mapNoteToLink(note)}>\n                            <ListGroup.Item action>\n                                {mapNoteToName(note)}\n                            </ListGroup.Item>\n                        </LinkContainer>\n                    ))}\n                </ListGroup>\n            </>\n        );\n    }\n}\n\nexport default Notes;\n","import TonalChord from \"@tonaljs/chord\";\nimport TonalNote from \"@tonaljs/note\";\nimport TonalScale from \"@tonaljs/scale\";\nimport TonalScaleType from \"@tonaljs/scale-type\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\nimport Table from \"react-bootstrap/Table\";\nimport { Helmet } from \"react-helmet\";\nimport { RouteComponentProps, withRouter } from \"react-router\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport { titleCase } from \"title-case\";\nimport * as Tone from \"tone\";\nimport Playback from \"../../components/Playback\";\nimport { mapLinkToNote, mapNoteToLink, mapNoteToName } from \"../../utilities\";\n\ntype PathParamsType = {\n    note: string;\n    scale: string;\n};\n\nexport type PropsType = RouteComponentProps<PathParamsType> & {};\n\ntype StateType = {\n    currentNote: string;\n};\n\nclass ScaleComponent extends Playback<PropsType, StateType> {\n    constructor(props: PropsType) {\n        super(props);\n\n        let note = \"c\";\n\n        if (this.props.match.params.note !== undefined)\n            note = mapLinkToNote(this.props.match.params.note);\n\n        this.state = {\n            currentNote: note,\n        };\n    }\n\n    toString() {\n        return titleCase(unescape(this.props.match.params.scale) + \" scale\");\n    }\n\n    async playKey() {\n        let notes: string[] = [\n            ...TonalScale.get(\n                this.state.currentNote +\n                    \"4 \" +\n                    unescape(this.props.match.params.scale)\n            ).notes,\n            this.state.currentNote + \"5\",\n            ...TonalScale.get(\n                this.state.currentNote +\n                    \"4 \" +\n                    unescape(this.props.match.params.scale)\n            ).notes.reverse(),\n        ];\n        let lengths: string[] = notes.map((note, i, arr) => {\n            if (i === arr.length - 1) return \"2n\";\n            return \"4n\";\n        });\n\n        await this.initialize();\n\n        let when: number = Tone.now();\n\n        for (let i = 0; i < notes.length; i++) {\n            let note = TonalNote.simplify(notes[i]);\n            let length = lengths[i];\n            this.playNote(note, length, when);\n            when += Tone.Time(length).toSeconds();\n        }\n    }\n\n    renderKey() {\n        return (\n            <Card className=\"text-center\">\n                <Card.Body>\n                    <Card.Title as=\"h4\">\n                        Key of{\" \"}\n                        {mapNoteToName(this.state.currentNote) +\n                            \" \" +\n                            titleCase(unescape(this.props.match.params.scale))}\n                    </Card.Title>\n                    <Card.Text>\n                        The following notes are included in this key:{\" \"}\n                        {TonalScale.get(\n                            this.state.currentNote +\n                                \"4 \" +\n                                unescape(this.props.match.params.scale)\n                        ).notes.map((note) => (\n                            <Link\n                                to={\n                                    \"/notes/\" +\n                                    mapNoteToLink(\n                                        TonalNote.simplify(note.slice(0, -1))\n                                    )\n                                }\n                            >\n                                {mapNoteToName(\n                                    TonalNote.simplify(note.slice(0, -1))\n                                )}\n                            </Link>\n                        ))}\n                    </Card.Text>\n                    <Card.Link onClick={async () => await this.playKey()}>\n                        Listen to the notes\n                    </Card.Link>\n                </Card.Body>\n            </Card>\n        );\n    }\n\n    renderChords() {\n        return (\n            <>\n                <Card className=\"text-center\">\n                    <Card.Body>\n                        <Card.Title as=\"h4\">\n                            Chords within the{\" \"}\n                            {mapNoteToName(this.state.currentNote) +\n                                \" \" +\n                                titleCase(\n                                    unescape(this.props.match.params.scale)\n                                ) +\n                                \" scale\"}\n                        </Card.Title>\n                    </Card.Body>\n                    <Card.Text>\n                        The following chords are part of this scale. You can\n                        follow the links to get more information on the specific\n                        chords or use the preview buttons to preview them from\n                        scratch.\n                    </Card.Text>\n                </Card>\n                <Table responsive striped bordered hover>\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>Preview slowly arpeggiated</th>\n                            <th>Preview quickly arpeggiated</th>\n                            <th>Preview full chord</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {TonalScale.scaleChords(\n                            this.state.currentNote +\n                                \" \" +\n                                unescape(this.props.match.params.scale)\n                        ).map((chord) => (\n                            <tr>\n                                <td>\n                                    <Link\n                                        to={\n                                            \"/chords/\" +\n                                            escape(\n                                                TonalChord.getChord(chord).name\n                                            ) +\n                                            \"/\" +\n                                            this.state.currentNote\n                                        }\n                                    >\n                                        {titleCase(\n                                            TonalChord.getChord(\n                                                chord,\n                                                this.state.currentNote\n                                            ).name\n                                        )}\n                                    </Link>\n                                </td>\n                                <td>\n                                    <Button\n                                        onClick={async () => {\n                                            await this.initialize();\n                                            this.playChord(\n                                                TonalChord.getChord(\n                                                    chord,\n                                                    this.state.currentNote + \"4\"\n                                                ).notes,\n                                                \"4n\"\n                                            );\n                                        }}\n                                    >\n                                        Preview\n                                    </Button>\n                                </td>\n                                <td>\n                                    <Button\n                                        onClick={async () => {\n                                            await this.initialize();\n                                            this.playChord(\n                                                TonalChord.getChord(\n                                                    chord,\n                                                    this.state.currentNote + \"4\"\n                                                ).notes,\n                                                \"32n\"\n                                            );\n                                        }}\n                                    >\n                                        Preview\n                                    </Button>\n                                </td>\n                                <td>\n                                    <Button\n                                        onClick={async () => {\n                                            await this.initialize();\n                                            this.playChord(\n                                                TonalChord.getChord(\n                                                    chord,\n                                                    this.state.currentNote + \"4\"\n                                                ).notes\n                                            );\n                                        }}\n                                    >\n                                        Preview\n                                    </Button>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </Table>\n            </>\n        );\n    }\n\n    render() {\n        return (\n            <>\n                <Helmet>\n                    <title>\n                        {mapNoteToName(this.state.currentNote) +\n                            \" \" +\n                            this.toString()}{\" \"}\n                        - Musical Sight\n                    </title>\n                </Helmet>\n                <h3>{this.toString()}</h3>\n                Select the current scale:\n                <DropdownButton\n                    title={\n                        \"Selected scale: \" +\n                        titleCase(unescape(this.props.match.params.scale))\n                    }\n                >\n                    {TonalScaleType.names()\n                        .sort()\n                        .map((scale) => (\n                            <LinkContainer\n                                to={\n                                    \"/scales/\" +\n                                    escape(scale) +\n                                    \"/\" +\n                                    mapNoteToLink(this.state.currentNote)\n                                }\n                            >\n                                <Dropdown.Item>\n                                    {titleCase(scale)}\n                                </Dropdown.Item>\n                            </LinkContainer>\n                        ))}\n                </DropdownButton>\n                Select the root note to choose the key for:\n                <DropdownButton\n                    title={\n                        \"Selected note: \" +\n                        mapNoteToName(this.state.currentNote)\n                    }\n                >\n                    {[\n                        \"c\",\n                        \"c#\",\n                        \"d\",\n                        \"d#\",\n                        \"e\",\n                        \"f\",\n                        \"f#\",\n                        \"g\",\n                        \"g#\",\n                        \"a\",\n                        \"a#\",\n                        \"b\",\n                    ].map((note) => (\n                        <LinkContainer\n                            replace\n                            to={\n                                \"/scales/\" +\n                                escape(this.props.match.params.scale) +\n                                \"/\" +\n                                mapNoteToLink(note)\n                            }\n                        >\n                            <Dropdown.Item\n                                onClick={() =>\n                                    this.setState({ currentNote: note })\n                                }\n                            >\n                                {mapNoteToName(note)}\n                            </Dropdown.Item>\n                        </LinkContainer>\n                    ))}\n                </DropdownButton>\n                {this.renderKey()}\n                {this.renderChords()}\n            </>\n        );\n    }\n}\n\nexport const Scale = withRouter(ScaleComponent);\n","import ScaleType from \"@tonaljs/scale-type\";\nimport React, { Component } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport { Helmet } from \"react-helmet\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\nclass Scales extends Component {\n    render() {\n        return (\n            <>\n                <Helmet>\n                    <title>Scales - Musical Sight</title>\n                </Helmet>\n\n                <Card className=\"text-center\">\n                    <Card.Body>\n                        <Card.Title as=\"h3\">Scales</Card.Title>\n                        <Card.Text>\n                            Musical theory describes scales to be a set of\n                            intervals that can be applied to any given note to\n                            find other notes that can be used together to create\n                            a musically appealing melody. There are alot\n                            different scales, but the most common ones in\n                            western music are probably the{\" \"}\n                            <Link to=\"/scales/major\">major</Link> and the{\" \"}\n                            <Link to=\"/scales/aeolian\">\n                                natural minor (also known as aeolian)\n                            </Link>{\" \"}\n                            scales.\n                        </Card.Text>\n                        <Card.Text>\n                            You will find the alphabetically sorted list of all\n                            common scales below. Follow the links to find more\n                            information about the scales, find the keys\n                            associated with them and audio examples as well.\n                        </Card.Text>\n                    </Card.Body>\n                </Card>\n\n                <h3>Scales List</h3>\n\n                <ListGroup>\n                    {ScaleType.names()\n                        .sort()\n                        .map((scale) => (\n                            <LinkContainer to={\"/scales/\" + escape(scale)}>\n                                <ListGroup.Item action>{scale}</ListGroup.Item>\n                            </LinkContainer>\n                        ))}\n                </ListGroup>\n            </>\n        );\n    }\n}\n\nexport default Scales;\n","import ChordType from \"@tonaljs/chord-type\";\nimport ScaleType from \"@tonaljs/scale-type\";\nimport React, { Component } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport { Link, Redirect, Route, Switch } from \"react-router-dom\";\nimport { Chord, PropsType as ChordPropsType } from \"../pages/chord/Chord\";\nimport Chords from \"../pages/chords/Chords\";\nimport Home from \"../pages/home/Home\";\nimport Imprint from \"../pages/imprint/Imprint\";\nimport { Note, PropsType as NotePropsType } from \"../pages/note/Note\";\nimport Notes from \"../pages/notes/Notes\";\nimport { PropsType as ScalePropsType, Scale } from \"../pages/scale/Scale\";\nimport Scales from \"../pages/scales/Scales\";\nimport { isNoteLink } from \"../utilities\";\n\nclass Navigation extends Component {\n    render() {\n        return (\n            <div>\n                <Container>\n                    <h2>Navigation</h2>\n                    <Navbar className=\"fixed-top\" bg=\"light\" variant=\"light\">\n                        <Navbar.Collapse>\n                            <Nav className=\"mr-auto\">\n                                <Nav.Item>\n                                    <Nav.Link as={Link} to=\"/\" active>\n                                        Home\n                                    </Nav.Link>\n                                </Nav.Item>\n                                <Nav.Item>\n                                    <Nav.Link as={Link} to=\"/notes\">\n                                        Notes\n                                    </Nav.Link>\n                                </Nav.Item>\n                                <Nav.Item>\n                                    <Nav.Link as={Link} to=\"/scales\">\n                                        Scales\n                                    </Nav.Link>\n                                </Nav.Item>\n                                <Nav.Item>\n                                    <Nav.Link as={Link} to=\"/chords\">\n                                        Chords\n                                    </Nav.Link>\n                                </Nav.Item>\n                                <Nav.Item>\n                                    <Nav.Link as={Link} to=\"/imprint\">\n                                        Imprint\n                                    </Nav.Link>\n                                </Nav.Item>\n                            </Nav>\n                        </Navbar.Collapse>\n                    </Navbar>\n                </Container>\n                <div>\n                    <Switch>\n                        <Route exact path=\"/\" component={Home} />\n                        <Route exact path=\"/imprint\" component={Imprint} />\n                        <Route exact path=\"/notes\" component={Notes} />\n                        <Route\n                            exact\n                            path=\"/notes/:note\"\n                            component={(props: NotePropsType) => {\n                                if (isNoteLink(props.match.params.note))\n                                    return <Note {...props} />;\n                                return <Redirect to=\"/not-found\" />;\n                            }}\n                        />\n                        <Route\n                            exact\n                            path=\"/scales/:scale/:note?\"\n                            component={(props: ScalePropsType) => {\n                                if (\n                                    ScaleType.names().includes(\n                                        unescape(props.match.params.scale)\n                                    )\n                                ) {\n                                    if (\n                                        props.match.params.note !== undefined &&\n                                        !isNoteLink(props.match.params.note)\n                                    )\n                                        return <Redirect to=\"/not-found\" />;\n                                    return <Scale {...props} />;\n                                }\n                                return <Redirect to=\"/not-found\" />;\n                            }}\n                        />\n                        <Route exact path=\"/scales\" component={Scales} />\n                        <Route exact path=\"/chords\" component={Chords} />\n                        <Route\n                            exact\n                            path=\"/chords/:chord/:note?\"\n                            component={(props: ChordPropsType) => {\n                                if (\n                                    ChordType.names().includes(\n                                        unescape(props.match.params.chord)\n                                    )\n                                ) {\n                                    if (\n                                        props.match.params.note !== undefined &&\n                                        !isNoteLink(props.match.params.note)\n                                    )\n                                        return <Redirect to=\"/not-found\" />;\n                                    return <Chord {...props} />;\n                                }\n                                return <Redirect to=\"/not-found\" />;\n                            }}\n                        />\n                        <Route\n                            render={function () {\n                                return <p>Not found</p>;\n                            }}\n                        />\n                    </Switch>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Navigation;\n","import React from \"react\";\nimport Navigation from \"./components/Navigation\";\n\nfunction App() {\n    return (\n        <>\n            <h1>Musical Sight</h1>\n            <Navigation></Navigation>\n        </>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <App />\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}