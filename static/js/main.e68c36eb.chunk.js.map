{"version":3,"sources":["pages/home/Home.tsx","pages/imprint/Imprint.tsx","components/Playback.tsx","pages/note/Note.tsx","utilities.ts","pages/notes/Notes.tsx","pages/scale/Scale.tsx","pages/scales/Scales.tsx","components/Navigation.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Home","Helmet","Card","className","Body","Title","as","Text","Component","Imprint","Playback","props","synth","Tone","toDestination","note","a","length","when","this","triggerAttackRelease","notes","Note","match","params","charAt","toUpperCase","substr","toString","onClick","playNote","withRouter","mapNoteToName","toLowerCase","isNaN","slice","mapNoteToLink","Notes","ListGroup","map","to","Item","action","Scale","state","currentNote","titleCase","unescape","scale","TonalScale","get","TonalNote","simplify","reverse","Link","playScale","DropdownButton","title","Dropdown","setState","renderScale","Scales","ScaleType","names","sort","escape","Navigation","Container","Navbar","bg","variant","Collapse","Nav","active","exact","path","component","replace","render","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e68c36eb.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport { Helmet } from \"react-helmet\";\n\nclass Home extends Component {\n    render() {\n        return (\n            <>\n                <Helmet>\n                    <title>Home - Musical Sight</title>\n                </Helmet>\n\n                <Card className=\"text-center\">\n                    <Card.Body>\n                        <Card.Title as=\"h3\">Welcome!</Card.Title>\n                        <Card.Text>\n                            Musical Sight aims to provide useful information\n                            about music theory, notes, scales and alot more.\n                            Most of the stuff shown here is common knowledge to\n                            sighted people who are able to communicate knowledge\n                            via slides, video material and more, while blind\n                            people often have to stick with learning through\n                            their ears only. To help them understand things a\n                            bit better, Musical Sight will try to organize\n                            information in a way that is more useful for blind\n                            people, including note and scale sound previews.\n                            Keep in mind however that this is still a fan\n                            website. Neither do I guarantee the correctness of\n                            all the information that is shown here, nor can I be\n                            made responsible for any potential damage that is\n                            caused to you by using this website.\n                        </Card.Text>\n                    </Card.Body>\n                </Card>\n            </>\n        );\n    }\n}\n\nexport default Home;\n","import React, { Component } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport { Helmet } from \"react-helmet\";\n\nclass Imprint extends Component {\n    render() {\n        return (\n            <>\n                <Helmet>\n                    <title>Imprint - Musical Sight</title>\n                </Helmet>\n\n                <Card className=\"text-center\">\n                    <Card.Body>\n                        <Card.Title>Imprint and related information</Card.Title>\n                        <Card.Text>\n                            Find all the relevant information here!\n                        </Card.Text>\n                    </Card.Body>\n                </Card>\n            </>\n        );\n    }\n}\n\nexport default Imprint;\n","import { Component } from \"react\";\nimport * as Tone from \"tone\";\n\nclass Playback<T1, T2> extends Component<T1, T2> {\n    synth: Tone.PolySynth;\n\n    constructor(props: T1) {\n        super(props);\n\n        this.synth = new Tone.PolySynth(Tone.Synth);\n\n        this.synth.toDestination();\n    }\n\n    async playNote(\n        note: string,\n        length: string = \"8n\",\n        when: number | string = \"\"\n    ) {\n        await Tone.start();\n\n        if (when === \"\") when = Tone.now();\n\n        this.synth.triggerAttackRelease(note, length, when);\n    }\n\n    async playChord(notes: string[]) {\n        await Tone.start();\n\n        this.synth.triggerAttackRelease(notes, \"8n\");\n    }\n}\n\nexport default Playback;\n","import { Helmet } from \"react-helmet\";\nimport { RouteComponentProps, withRouter } from \"react-router\";\nimport Playback from \"../../components/Playback\";\n\ntype PathParamsType = {\n    note: string;\n};\n\ntype PropsType = RouteComponentProps<PathParamsType> & {};\n\nclass Note extends Playback<PropsType, {}> {\n    note: string;\n\n    constructor(props: PropsType) {\n        super(props);\n\n        // parsing the note out of the url parameter\n        this.note = this.props.match.params.note.charAt(0);\n\n        if (this.props.match.params.note.match(/[a-g]-sharp/i))\n            this.note += \"#\";\n        else if (this.props.match.params.note.match(/[a-g]-flat/i))\n            this.note += \"b\";\n    }\n\n    toString() {\n        return this.note[0].toUpperCase() + this.note.substr(1);\n    }\n\n    render() {\n        return (\n            <>\n                <Helmet>\n                    <title>{this.toString()} - Musical Sight</title>\n                </Helmet>\n\n                <h3>{this.toString()}</h3>\n\n                <button\n                    onClick={async () => {\n                        await this.playNote(this.note + \"4\");\n                    }}\n                >\n                    Listen now\n                </button>\n            </>\n        );\n    }\n}\n\nexport default withRouter(Note);\n","export const mapNoteToName = (note: string): string => {\n    note = note.toLowerCase();\n\n    if (!isNaN(+note.slice(-1))) note = note.slice(0, -1);\n\n    if (note.length > 1) {\n        if (note.slice(-1) === \"#\") return note[0].toUpperCase() + \" sharp\";\n        else if (note.slice(-1) === \"b\") return note[0].toUpperCase() + \" flat\";\n    }\n    return note[0].toUpperCase();\n};\n\nexport const mapNoteToLink = (note: string): string => {\n    note = note.toLowerCase();\n\n    if (!isNaN(+note.slice(-1))) note = note.slice(0, -1);\n\n    if (note.length > 1) {\n        if (note.slice(-1) === \"#\") return note[0] + \"-sharp\";\n        else if (note.slice(-1) === \"b\") return note[0] + \"-flat\";\n    }\n    return note[0];\n};\n","import React, { Component } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport { Helmet } from \"react-helmet\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport { mapNoteToLink, mapNoteToName } from \"../../utilities\";\n\nclass Notes extends Component {\n    render() {\n        return (\n            <>\n                <Helmet>\n                    <title>Notes - Musical Sight</title>\n                </Helmet>\n\n                <Card className=\"text-center\">\n                    <Card.Body>\n                        <Card.Title as=\"h3\">Notes</Card.Title>\n                        <Card.Text>\n                            All melodies and chords consist of the same 12 notes\n                            distributed over multiple octaves, starting from\n                            octave 0 up to octave 7. Notes are usually written\n                            with their corresponding octave number appended to\n                            them, the note C in octave 4 being written as C4. C4\n                            is also known as the middle C.\n                        </Card.Text>\n                        <Card.Text>\n                            This page lists all 12 notes in ascending order,\n                            with all the sharp/flat notes being known as the\n                            black keys on a keyboard and every other note being\n                            a white key. The highest note (B) is followed by a C\n                            again, but within the next octave and vice versa.\n                            You can click on any note listed here to open its\n                            corresponding page, where you will find listening\n                            example and more information on the note, its keys\n                            and so on.\n                        </Card.Text>\n                    </Card.Body>\n                </Card>\n\n                <h3>Notes List</h3>\n\n                <ListGroup>\n                    {[\n                        \"c\",\n                        \"c#\",\n                        \"d\",\n                        \"d#\",\n                        \"e\",\n                        \"f\",\n                        \"f#\",\n                        \"g\",\n                        \"g#\",\n                        \"a\",\n                        \"a#\",\n                        \"b\",\n                    ].map((note) => (\n                        <LinkContainer to={\"/notes/\" + mapNoteToLink(note)}>\n                            <ListGroup.Item action>\n                                {mapNoteToName(note)}\n                            </ListGroup.Item>\n                        </LinkContainer>\n                    ))}\n                </ListGroup>\n            </>\n        );\n    }\n}\n\nexport default Notes;\n","import TonalNote from \"@tonaljs/note\";\nimport TonalScale from \"@tonaljs/scale\";\nimport Card from \"react-bootstrap/Card\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\nimport { Helmet } from \"react-helmet\";\nimport { RouteComponentProps, withRouter } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport { titleCase } from \"title-case\";\nimport * as Tone from \"tone\";\nimport Playback from \"../../components/Playback\";\nimport { mapNoteToLink, mapNoteToName } from \"../../utilities\";\n\ntype PathParamsType = {\n    scale: string;\n};\n\ntype PropsType = RouteComponentProps<PathParamsType> & {};\n\ntype StateType = {\n    currentNote: string;\n};\n\nclass Scale extends Playback<PropsType, StateType> {\n    constructor(props: PropsType) {\n        super(props);\n\n        this.state = {\n            currentNote: \"c\",\n        };\n    }\n\n    toString() {\n        return titleCase(unescape(this.props.match.params.scale) + \" scale\");\n    }\n\n    async playScale() {\n        let when = Tone.now();\n\n        for (let note of TonalScale.get(\n            this.state.currentNote +\n                \"4 \" +\n                unescape(this.props.match.params.scale)\n        ).notes) {\n            await this.playNote(TonalNote.simplify(note), \"8n\", when);\n            when += 0.5;\n        }\n\n        await this.playNote(\n            TonalNote.simplify(this.state.currentNote + \"5\"),\n            \"8n\",\n            when\n        );\n        when += 0.5;\n\n        for (let note of TonalScale.get(\n            this.state.currentNote +\n                \"4 \" +\n                unescape(this.props.match.params.scale)\n        ).notes.reverse()) {\n            await this.playNote(TonalNote.simplify(note), \"8n\", when);\n            when += 0.5;\n        }\n    }\n\n    renderScale() {\n        return (\n            <Card className=\"text-center\">\n                <Card.Body>\n                    <Card.Title as=\"h4\">\n                        {mapNoteToName(this.state.currentNote)}\n                    </Card.Title>\n                    <Card.Text>\n                        The following notes are included in this scale:{\" \"}\n                        {TonalScale.get(\n                            this.state.currentNote +\n                                \"4 \" +\n                                unescape(this.props.match.params.scale)\n                        ).notes.map((note) => (\n                            <Link\n                                to={\n                                    \"/notes/\" +\n                                    mapNoteToLink(\n                                        TonalNote.simplify(note.slice(0, -1))\n                                    )\n                                }\n                            >\n                                {mapNoteToName(\n                                    TonalNote.simplify(note.slice(0, -1))\n                                )}\n                            </Link>\n                        ))}\n                    </Card.Text>\n                    <Card.Link onClick={async () => await this.playScale()}>\n                        Listen to the scale\n                    </Card.Link>\n                </Card.Body>\n            </Card>\n        );\n    }\n\n    render() {\n        return (\n            <>\n                <Helmet>\n                    <title>{this.toString()} - Musical Sight</title>\n                </Helmet>\n                <h3>{this.toString()}</h3>\n                Select the root note to choose the key for:\n                <DropdownButton\n                    title={\n                        \"Selected note: \" +\n                        mapNoteToName(this.state.currentNote)\n                    }\n                >\n                    {[\n                        \"c\",\n                        \"c#\",\n                        \"d\",\n                        \"d#\",\n                        \"e\",\n                        \"f\",\n                        \"f#\",\n                        \"g\",\n                        \"g#\",\n                        \"a\",\n                        \"a#\",\n                        \"b\",\n                    ].map((note) => (\n                        <Dropdown.Item\n                            onClick={() =>\n                                this.setState({\n                                    currentNote: note,\n                                })\n                            }\n                        >\n                            {mapNoteToName(note)}\n                        </Dropdown.Item>\n                    ))}\n                </DropdownButton>\n                {this.renderScale()}\n            </>\n        );\n    }\n}\n\nexport default withRouter(Scale);\n","import ScaleType from \"@tonaljs/scale-type\";\nimport React, { Component } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport { Helmet } from \"react-helmet\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\nclass Scales extends Component {\n    render() {\n        return (\n            <>\n                <Helmet>\n                    <title>Scales - Musical Sight</title>\n                </Helmet>\n\n                <Card className=\"text-center\">\n                    <Card.Body>\n                        <Card.Title as=\"h3\">Scales</Card.Title>\n                        <Card.Text>\n                            Musical theory describes scales to be a set of\n                            intervals that can be applied to any given note to\n                            find other notes that can be used together to create\n                            a musically appealing melody. There are alot\n                            different scales, but the most common ones in\n                            western music are probably the{\" \"}\n                            <Link to=\"/scales/major\">major</Link> and the{\" \"}\n                            <Link to=\"/scales/aeolian\">\n                                natural minor (also known as aeolian)\n                            </Link>{\" \"}\n                            scales.\n                        </Card.Text>\n                        <Card.Text>\n                            You will find the alphabetically sorted list of all\n                            common scales below. Follow the links to find more\n                            information about the scales, find the keys\n                            associated with them and audio examples as well.\n                        </Card.Text>\n                    </Card.Body>\n                </Card>\n\n                <h3>Scales List</h3>\n\n                <ListGroup>\n                    {ScaleType.names()\n                        .sort()\n                        .map((scale) => (\n                            <LinkContainer to={\"/scales/\" + escape(scale)}>\n                                <ListGroup.Item action>{scale}</ListGroup.Item>\n                            </LinkContainer>\n                        ))}\n                </ListGroup>\n            </>\n        );\n    }\n}\n\nexport default Scales;\n","import ScaleType from \"@tonaljs/scale-type\";\nimport React, { Component } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport { Link, Route, Switch } from \"react-router-dom\";\nimport Home from \"../pages/home/Home\";\nimport Imprint from \"../pages/imprint/Imprint\";\nimport Note from \"../pages/note/Note\";\nimport Notes from \"../pages/notes/Notes\";\nimport Scale from \"../pages/scale/Scale\";\nimport Scales from \"../pages/scales/Scales\";\n\nclass Navigation extends Component {\n    render() {\n        return (\n            <div>\n                <Container>\n                    <h2>Navigation</h2>\n                    <Navbar className=\"fixed-top\" bg=\"light\" variant=\"light\">\n                        <Navbar.Collapse>\n                            <Nav className=\"mr-auto\">\n                                <Nav.Item>\n                                    <Nav.Link as={Link} to=\"/\" active>\n                                        Home\n                                    </Nav.Link>\n                                </Nav.Item>\n                                <Nav.Item>\n                                    <Nav.Link as={Link} to=\"/notes\">\n                                        Notes\n                                    </Nav.Link>\n                                </Nav.Item>\n                                <Nav.Item>\n                                    <Nav.Link as={Link} to=\"/scales\">\n                                        Scales\n                                    </Nav.Link>\n                                </Nav.Item>\n                                <Nav.Item>\n                                    <Nav.Link as={Link} to=\"/imprint\">\n                                        Imprint\n                                    </Nav.Link>\n                                </Nav.Item>\n                            </Nav>\n                        </Navbar.Collapse>\n                    </Navbar>\n                </Container>\n                <div>\n                    <Switch>\n                        <Route exact path=\"/\" component={Home} />\n                        <Route exact path=\"/imprint\" component={Imprint} />\n                        <Route exact path=\"/notes\" component={Notes} />\n                        <Route path=\"/notes/:note([a-g])\" component={Note} />\n                        <Route\n                            path=\"/notes/:note([a-g]-sharp)\"\n                            component={Note}\n                        />\n                        <Route\n                            path=\"/notes/:note([a-g]-flat)\"\n                            component={Note}\n                        />\n                        {ScaleType.names().map((scale) => (\n                            <Route\n                                path={\n                                    \"/scales/:scale(\" +\n                                    scale.replace(\"#\", \"%23\") +\n                                    \")\"\n                                }\n                                component={Scale}\n                            />\n                        ))}\n                        <Route exact path=\"/scales\" component={Scales} />\n                        <Route\n                            render={function () {\n                                return <p>Not found</p>;\n                            }}\n                        />\n                    </Switch>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Navigation;\n","import React from \"react\";\nimport Navigation from \"./components/Navigation\";\n\nfunction App() {\n    return (\n        <>\n            <h1>Musical Sight</h1>\n            <Navigation></Navigation>\n        </>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <App />\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}